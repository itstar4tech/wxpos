= Modules =

A wxpos module is a part of the software which has a specific role in it: as "user" that gives the ability to login to the software or "stock" that allows the user to keep track of his stock, etc... Got the idea?

It is a directory in the pos/modules/ directory which can/must contain the following elements: (suppose the name of the module "mname")
  * pos/modules/mname/__init__.py that defines the dependencies tuple (that contains a list of other modules on which it depends) and a !ModuleMenu class (which defines the menu items this module should have in the menu)
  * pos/modules/mname/db/ A python module that would define a ModuleDB class that defines Database functions that can be applied to make the module work. Plus a config function that creates the database/tables or files or whatever (here it also adds the default values to db, but shouldn't)
  * pos/modules/mname/objects/ A python module, most usually based on the "base" module objects that defines an interface to the database system, it is present as a way of making the software database independent. That might be the wrong way of doing it, but yeah.. it's working, so .... Anyway see the pos/modules/base/objects/common.py and the pos/modules/user/objects/user.py for ex to understand it, it's not that complicated...
  * pos/modules/mname/panels/ Contains the panels used in the main toolbook of the app frame. That means every menu item should have a panel defined in that python module associated with it, as the the app frame contains essentially only a wx.Toolbook whose pages are the menu items and the panels to which each one is associated...
  * pos/modules/mname/dialogs/ Contains the dialogs that could be used for the functionality of the module to be complete...

That structure is recommended but not required. One thing is absolutely required: the dependencies tuple, even if it is empty...
So, there might be no db module, no db config, no objects or no panels directories. But what would there be then ? right ? That is why it is recommended to follow that structure. But still it's completely up to you, and anyway that is what is followed by all those modules already done.

That is a list of all modules done and to be done:

== BASE ==

=== Content ===
Base module that provides the most basic functionality of the pos system. It is a base that should be extended by other modules.
    * idManager: object: Keeps track of given ids to windows in a dict. If a key is missing, it assigns a wx.NewId() to that key.
    * common: object: Base module for easy connection between database and object. Provides a set of similar functions for deleting, updating, adding and finding items.
    * manage: panel: Base panel for CRUD operation (new item, delete item, update item, list items)

=== TODO ===
  * should i implement menu in it? don't think so....
  * when updating an item, if the data is None, it does not update it (see product->category) coz in db.update functions default is None, and if it is default nothing happens.
  * if you save without changing anything, it says there is an error



== CURRENCY ==

=== Content ===
Curency module that manages multiple currencies, with their symbols, default currency and conversion between one another
  * currency: db: Stores and retrieves the currency name, symbol, and value. The value is relative to another currencie's. ex: 1500 LL = 1$ => LL value=1; $ value=1500x1 = 1500
  * currency: object: Allows conversion between units, retreiving the default one and all the other functionality of the currency module.
  * currencies: panel: UI based on managePanel that allows to editing of value and name and symbol of the currencies. No deletion allowed.

=== TODO ===
  * should i only allow one currency which is the default one
  * add the ability to change the default currency



== CUSTOMER ==

=== Content ===
A customer might be a person or a company that frequently purchases from the company. Discounts may be associated to it, debts, and periodic bill payments.
  * customer: db: Stores and retrieves customer info, contact details and address details.
  * customergroup: db: Stores and retrieves the name of the group of customers and a comment about it.
  * customer: object: Object facade to the db. Based on the common object
  * customergroup: object: Object facade to the db. Based on the common object
  * customers: panel: Manage Panel to the customers (list, add, delete, edit)
  * customergroups: panel: Manage Panel to the groups.

=== TODO ===
  * customerdiscount: discount(0%-100%), product, customer



== USER ==

=== Content ===
A user is a person who can login and use the application. Every one of them has a password, a role, and specific permissions that limit its use of it.
  * user: db: Username, password
  * role: db: Name, list of permissions
  * permission: db: Name, description of what is allowed to do with that one.
  * user,role,permission: object: Based on common facade to the relative db objects.
  * users,roles,permissions: panel: Based on ManagePanel. Allow management of users, their roles, their permissions.
  * user: panel: Alllows lmited editing of the currently logged in user by himself.

=== TODO ===
Done.



== STOCK ==

=== Content ===
Provides functionality for adding and removing products that can be sold in the shop. These can be grouped in nested(or not) categories.
  * category: db: Name, parent category.
  * product: db: Name, description, price, currency, code, reference, quantity, category
  * category,product: object: Facade to the corresponding db items.
  * categories,products: panel: Based on ManagePanel. Allow management of categories and products.

=== TODO ===
  * add ability to choose if this product is in stock("stockable") or not (e.g. newspaper, photocopie, whatever)
  * add ability to set buy price, sell price, taxes (like posper)
  * stock diary (products bought ...)



== SALES ==

=== Content ===
Provides the ability to create tickets and sell items to clients and customers with browsable categories and products.
  * ticket: db/object: list of lines of sold items (which can and can not be based on products)
  * ticketline: db/object: line which contains a description of what is sold, price and amount.
  * main: panel: Main panel in which is available a catalog, a ticketline list and ticket manipulation actions.

=== TODO ===
  * Print functionality
  * Cash drawer functionality
  * Cash register functionality (close cash): cash difference, date open date close, user, etc...



== PAYMENT ==

=== Content ===
Provides the ability to add shop payments made for maintenance, salaries, stock buying or other expenses or incomes to keep track of cash flow.

=== TODO ===
Not done yet.



== REPORT ==

=== Content ===
Provides the abilty to generate reports of stock, payments, etc. on specific time period.

=== TODO ===
Not done yet.



== TAXES ==

=== Content ===
Useless for now.

=== TODO ===
Not done yet.